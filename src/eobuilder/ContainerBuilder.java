package com.qkernel.eobuilder;

import java.sql.*;
import java.io.*;

/**

 */

public class ContainerBuilder
{

    //Public Vars

    public String login = "";
    public String password = "";
    public String CATALOG = login;
    public String schema= login;
    public String importName = "";
    public EOBuilderConfig config = null;
    /**
     *  Description of the Field
     */
    public String driver = "";
    /**
     *  Description of the Field
     */
    public String url = "";
    /**
     *  Description of the Field
     */
    public boolean useMorphers = true;
    /**
     *  Description of the Field
     */
    public String outputDir = "";
    /**
     *  Description of the Field
     */
    public String packageName = "";
    /**
     *  Description of the Field
     */
    public String containerName = "";
    /**
     *  Description of the Field
     */
    public String aiv = "RECORD_ID";
    /**
     *  Description of the Field
     */
    public String aiq = "SELECT ";
    /**
     *  Description of the Field
     */
    public String[] types = {"TABLE"};
    /**
     *  Description of the Field
     */
    public String catalog=CATALOG;
    /**
     *  Description of the Field
     */
    public DatabaseMetaData dbmd;

    //Member Vars
    String importString="";
    FileWriter fw = null;
    Connection conn = null;


    /**
     *  The default constructor
     *
     *@param  drv  Description of the Parameter
     *@param  url  Description of the Parameter
     */
    public ContainerBuilder(String drv, String url, String user, String pass)
    {
        this.url = url;
        this.driver = drv;
        try
	{
            Class.forName(this.driver);
            conn = DriverManager.getConnection(this.url, user, pass);
            this.dbmd = conn.getMetaData();
            this.catalog = conn.getCatalog();

        }
	catch (Exception e)
	{
            e.printStackTrace();
            System.exit(1);
        }
    }


    /**
     *  This function gets all of the tablenames, and then builds the container
     *
     */
    public void doBuild()
    {
        String nextTable = "";
	String entityDefs="";
	String entityConstructs="";
        String data = "";
	importString = "import com.qkernel.*;\nimport "+this.importName+".*;\n";
        try
	{
            ResultSet tables = dbmd.getTables(catalog, schema, null, types);

		entityConstructs+= "   /**\n";
		entityConstructs+= "    * Here is where we create "+containerName+" EnityObjects...\n";
		entityConstructs+= "    * Invoke in the following way:\n";
		entityConstructs+= "    * <BR><BR>\n";
		entityConstructs+= "    * <PRE>\n";
		entityConstructs+= "    *          Obj = new ObjClass();\n";
		entityConstructs+= "    *          Obj.create(this, \"name\");\n";
		entityConstructs+= "    *          Obj.load();\n";
		entityConstructs+= "    * </PRE>\n";
		entityConstructs+= "    */\n";
		entityConstructs+= "    public void load()\n";
		entityConstructs+= "    {\n";

            while (tables.next())
	    {
                nextTable = tables.getString("TABLE_NAME");
		if(config.getString(nextTable).equals("exclude"))
		    continue;
		
        	System.out.println("Adding "+nextTable+" to Container...");
		entityDefs      += "    public static eo_"+nextTable+" "+nextTable+";\n";

		entityConstructs+= "        "+nextTable+" = new eo_"+nextTable+"();\n";
		entityConstructs+= "        "+nextTable+".create(this, \"eo_"+nextTable+"\");\n";
		entityConstructs+= "        "+nextTable+".load();\n\n";
            }
            tables.close();
	    entityConstructs+= "    }\n";
            data += writeHeader();
            data += entityDefs;
            data += entityConstructs;
            data += writeFooter();
            writeToFile(data);
            System.out.println("ContainerBuilder Done.");
        }
	catch (Exception e)
	{
            System.err.println(nextTable);
            e.printStackTrace();
        }
    }

    /**
     *  This function computes and returns the header of the eo Object
     *
     *@param  tablename  Description of the Parameter
     *@return            Description of the Return Value
     */

    public String writeHeader()
    {
        String retval = "/* "+containerName+"Container.java\n";
        retval += " *\n";
        retval += " * THE FOLLOWING CODE IS AUTO GENERATED BY GENDB SCRIPT \n";
        retval += " * !!!!!!!!!!!!  DO NOT MODIFY THIS FILE !!!!!!!!!!!\n";
        retval += " */\n";
        retval += "package " + packageName + ";\n\n";
        retval += importString+"\n\n";
	retval += "@SuppressWarnings({\"unchecked\", \"fallthrough\", \"serial\" })\n";
        retval += "/***********************************************************************\n";
        retval += " * Creates/loads all of the EnityObjects for the Business server.\n";
        retval += " * The <code>load()</code> method must be implemented.\n";
        retval += " * <code>load()</code> must do the following for each EnityObject:\n";
        retval += " *     <li> Instantiate each entity via \"new\"\n";
        retval += " *     <li> Invoke the create method on the EnityObject\n";
        retval += " * </ol>\n";
        retval += " ***********************************************************************\n";
        retval += " */\n";
        retval += "public class "+containerName+"Container extends EntityContainer\n";
        retval += "{\n\n";
        return retval;
    }

    /**
     *  This function computes and returns the footer of the eo_object
     *
     *@param  tablename  Description of the Parameter
     *@return            Description of the Return Value
     */
    public String writeFooter()
    {
        return "}\n\n";
    }


    /**
     *  This function writes a container to a file
     *  </i>
     *
     *@param  data             Description of the Parameter
     *@exception  IOException  Description of the Exception
     */
    public void writeToFile(String data) throws IOException
    {
        fw = new FileWriter(outputDir+"/"+containerName+"Container.java");
        fw.write(data, 0, data.length());
        fw.flush();
        fw.close();
    }


    /**
     *  This function formats and returns the string passed in, so that only the
     *  first letter is capitalized
     *
     *@param  name  Description of the Parameter
     *@return       Description of the Return Value
     */
    public String format(String name)
    {
	return(name); // No format change
    }

    private String nonUnique(String param)
    {
	return(param); // No format change
   }

}

