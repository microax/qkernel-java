/* eo_contact_gen.java
 *
 * THE FOLLOWING CODE IS AUTO GENERATED BY GENDB SCRIPT 
 * !!!!!!!!!!!!  DO NOT MODIFY THIS FILE !!!!!!!!!!!
 */
package com.qkernel.examples.model;

import java.lang.*;
import java.sql.*;
import java.util.*;

import com.qkernel.*;


@SuppressWarnings({"unchecked", "fallthrough", "serial" })
/************************************************************
 * An entity object for the db table contact
 * 
 * 
 * @author Initially created by EntityObjectBuilder
 * @version $Revision$ 
 ************************************************************
 */
public abstract class eo_contact_gen extends EntityObject
{

    public final static String FIELD_CONTACTID = "contactId";
    public final static String FIELD_CONTACTNAME = "contactName";
    public final static String FIELD_CONTACTEMAIL = "contactEmail";
    public final static String FIELD_CONTACTPHONE = "contactPhone";
    public final static String FIELD_CONTACTCOMPANY = "contactCompany";
    public final static String FIELD_CONTACTSUBJECT = "contactSubject";
    public final static String FIELD_CONTACTMESSAGE = "contactMessage";
    public final static String FIELD_CONTACTSOURCE = "contactSource";
    public final static String FIELD_CONTACTCREATED = "contactCreated";
    public final static String FIELD_CONTACTMODIFIED = "contactModified";
    public final static String FIELD_CONTACTSTATUS = "contactStatus";

    /****************************************************
     * find(): This method implements find by primary key
     * key for the table contact.
     * If it doesn't find the object in the existing 
     * cache, it loads the necessary data from the db.
     *
     * @param id The primary key value for the record we
     *  searching for
     * @return a vo_contact object, representing
     *  the record
     ****************************************************
     */
    public vo_contact find(int id)
    {
        vo_contact e = findInCache(id);

        if(e == null)
        {
            // Try to load cache first
            load(id);
            return(findInCache(id));
        }
        else 
        {
            // return cache value
            return(e);
        }
    }

    /*****************************************************
     * This method checks the cache for the requested item
     *
     * @param id the primary key of the record we're 
     *  looking for
     *
     * @return a vo_contact that represents the 
     *  record or null, if it doesn't exist
     *
     *****************************************************
     */
    public vo_contact findInCache(int id)
    {
        vo_contact e = null;
        e = (vo_contact)entityCache.get(new Integer(id));
        return(e);
    }

    /****************************************************
     * find(): This method implements find by primary key
     * key for the table contact.
     * If it doesn't find the object in the existing 
     * cache, it loads the necessary data from the db.
     *
     * @param id The primary key value for the record we
     *  searching for
     * @return a vo_contact object, representing
     *  the record
     ****************************************************
     */
    public vo_contact find(String id)
    {
        vo_contact e = findInCache(id);

        if(e == null)
        {
            // Try to load cache first
            load(id);
            return(findInCache(id));
        }
        else 
        {
            // return cache value
            return(e);
        }
    }

    /*****************************************************
     * This method checks the cache for the requested item
     *
     * @param id the primary key of the record we're 
     *  looking for
     *
     * @return a vo_contact that represents the 
     *  record or null, if it doesn't exist
     *
     *****************************************************
     */
    public vo_contact findInCache(String id)
    {
        vo_contact e = null;
        e = (vo_contact)entityCache.get(id);
        return(e);
    }

    /*****************************************************
     * This function returns an ArrayList  of all Value 
     * Objects in this Entity Object
     * @return an ArrayList of all the vo_contact 
     *  objects
     *
     *****************************************************
     */
    public ArrayList find()
    {
        String query = "SELECT * FROM contact ";
        ArrayList al = new ArrayList();
        executeQuery(query, "setEntity", al);
        return al;
    }

    /*****************************************************
     * This function returns an ArrayList  of all Value 
     * Objects based on query
     * @return an ArrayList of all the vo_contact 
     *  objects
     *
     *****************************************************
     */
    public ArrayList executeQueryList(String query)
    {
        ArrayList al = new ArrayList();
        executeQuery(query, "setEntity", al);
        return al;
    }

    /*****************************************************
     * This function returns an ArrayList  of all Value 
     * Objects based on query
     * @return an ArrayList of all the vo_contact 
     *  objects
     *
     *****************************************************
     */
    public ArrayList executeQueryList(String query, String mapper)
    {
        ArrayList al = new ArrayList();
        executeQuery(query, mapper, al);
        return al;
    }

    /****************************************************
     * executeQueryObject(): This method implements 
     * executeQuery for the table contact.
     * -- and returns vo_contact  
     * @param query string
     * @return a vo_contact object
     ****************************************************
     */
    public vo_contact executeQueryObject(String query)
    {
        Vector vec = new Vector();
        executeQuery(query, "setEntityV", vec );
        Enumeration enm = vec.elements();
        if(enm.hasMoreElements())
            return((vo_contact)enm.nextElement());
        else
            return(null);
    }

    /****************************************************
     * executeQueryObject(): This method implements 
     * executeQuery for the table contact.
     * -- and returns vo_contact  
     * @param query string
     * @return a vo_contact object
     ****************************************************
     */
    public vo_contact executeQueryObject(String query, String mapper)
    {
        Vector vec = new Vector();
        executeQuery(query, mapper, vec );
        Enumeration enm = vec.elements();
        if(enm.hasMoreElements())
            return((vo_contact)enm.nextElement());
        else
            return(null);
    }

    /*****************************************************
     * This function takes the current row in a ResultSet,
     * creates a vo_contact object with the data, 
     * @param rs A result set of a query on the contact table
     *****************************************************
     */
     public void setEntity(ResultSet rs, ArrayList al) throws SQLException
     {
         vo_contact e = entityRow(rs);
         al.add(e);
     }

    /*****************************************************
     * This function takes the current row in a ResultSet,
     * creates a vo_contact object with the data, 
     * @param rs A result set of a query on the contact table
     *****************************************************
     */
     public void setEntityV(ResultSet rs, Vector vec) throws SQLException
     {
         vo_contact e = entityRow(rs);
         vec.addElement(e);
     }

    /*****************************************************
     * This function is similar to the setEntity() method.
     * It takes the current row in a ResultSet,
     * creates a vo_contact object with the data, 
     * but instead of placing it in the cache,
     * it places it in the ArrayList that is passed in.
    *
     * @param al An ArrayList to place the resulting vo_contact object into.
     * @param rs A result set of a query on the contact table
     * @see #setEntity()
     ****************************************************
     */
    public void setEntityC(ResultSet rs) throws SQLException
    {
        vo_contact e = entityRow(rs);
        entityCache.put(new Integer(e.contactId), e);
     }

    /****************************************************
     * This function maps an SQL row to a Value Object
     *
     * @param rs a ResultSet that contains the record to be mapped
     * @return a vo_contact value object
     ****************************************************
     */
    public vo_contact entityRow(ResultSet rs) throws SQLException
    {
        vo_contact e = new vo_contact();
        e.contactId= rs.getInt(FIELD_CONTACTID);
        e.contactName= rs.getString(FIELD_CONTACTNAME);
        e.contactEmail= rs.getString(FIELD_CONTACTEMAIL);
        e.contactPhone= rs.getString(FIELD_CONTACTPHONE);
        e.contactCompany= rs.getString(FIELD_CONTACTCOMPANY);
        e.contactSubject= rs.getString(FIELD_CONTACTSUBJECT);
        e.contactMessage= rs.getString(FIELD_CONTACTMESSAGE);
        e.contactSource= rs.getString(FIELD_CONTACTSOURCE);
        e.contactCreated= rs.getString(FIELD_CONTACTCREATED);
        e.contactModified= rs.getString(FIELD_CONTACTMODIFIED);
        e.contactStatus= rs.getString(FIELD_CONTACTSTATUS);
        return(e);
    }

    /****************************************************
     * This method inserts a new record into the table,
     * but DOES NOT return the new ID or a reference object
     * @param vo_contact a value object to be written
     *  to the DB
     * @see #insert2()
     ****************************************************
     */
    public void insert(vo_contact e){
        StringBuffer qsb=new StringBuffer();
        qsb.append("INSERT INTO contact(");
        qsb.append(FIELD_CONTACTNAME+",");
        qsb.append(FIELD_CONTACTEMAIL+",");
        qsb.append(FIELD_CONTACTPHONE+",");
        qsb.append(FIELD_CONTACTCOMPANY+",");
        qsb.append(FIELD_CONTACTSUBJECT+",");
        qsb.append(FIELD_CONTACTMESSAGE+",");
        qsb.append(FIELD_CONTACTSOURCE+",");
        qsb.append(FIELD_CONTACTCREATED+",");
        qsb.append(FIELD_CONTACTMODIFIED+",");
        qsb.append(FIELD_CONTACTSTATUS+")");
        qsb.append("VALUES(");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactName)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactEmail)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactPhone)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactCompany)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactSubject)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactMessage)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactSource)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactCreated)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactModified)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactStatus)).append("')");


        executeUpdate(qsb.toString());
    }

    /****************************************************
     * This method inserts a new record into the table,
     * using the local entityQueue
     * @param vo_contact a value object to be written
     *  to the DB
     * @see #insert2()
     ****************************************************
     */
    public void insertQueue(vo_contact e){
        StringBuffer qsb=new StringBuffer();
        qsb.append("INSERT INTO contact(");
        qsb.append(FIELD_CONTACTNAME+",");
        qsb.append(FIELD_CONTACTEMAIL+",");
        qsb.append(FIELD_CONTACTPHONE+",");
        qsb.append(FIELD_CONTACTCOMPANY+",");
        qsb.append(FIELD_CONTACTSUBJECT+",");
        qsb.append(FIELD_CONTACTMESSAGE+",");
        qsb.append(FIELD_CONTACTSOURCE+",");
        qsb.append(FIELD_CONTACTCREATED+",");
        qsb.append(FIELD_CONTACTMODIFIED+",");
        qsb.append(FIELD_CONTACTSTATUS+")");
        qsb.append("VALUES(");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactName)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactEmail)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactPhone)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactCompany)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactSubject)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactMessage)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactSource)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactCreated)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactModified)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactStatus)).append("')");


        entityQueue.put(qsb.toString());
    }

    /****************************************************
     * This method inserts a new record into the table,
     * AND returns a reference object with the new
     * auto-generated PK;
     *
     * @param vo_contact a value object to be written to the DB
      * @return a vo_contact object that represents
     *  the original object, with the addition of the primary key
     * @see #insert()
     ****************************************************
     */
    public vo_contact insert2(vo_contact e)
    {
        vo_contact e1=(vo_contact) e.clone();

        StringBuffer qsb=new StringBuffer();
        qsb.append("INSERT INTO contact(");
        qsb.append(FIELD_CONTACTNAME+",");
        qsb.append(FIELD_CONTACTEMAIL+",");
        qsb.append(FIELD_CONTACTPHONE+",");
        qsb.append(FIELD_CONTACTCOMPANY+",");
        qsb.append(FIELD_CONTACTSUBJECT+",");
        qsb.append(FIELD_CONTACTMESSAGE+",");
        qsb.append(FIELD_CONTACTSOURCE+",");
        qsb.append(FIELD_CONTACTCREATED+",");
        qsb.append(FIELD_CONTACTMODIFIED+",");
        qsb.append(FIELD_CONTACTSTATUS+")");
        qsb.append("VALUES(");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactName)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactEmail)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactPhone)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactCompany)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactSubject)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactMessage)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactSource)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactCreated)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactModified)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.contactStatus)).append("')");


        try
        {
            Connection conn    = entityDbPool.getConnection();
            Statement stmt     = conn.createStatement();
            stmt.executeUpdate(qsb.toString());
            //------------------------------------------------------------------
            // Retrieve new AUTO_INCREMENT contactId 
            //------------------------------------------------------------------
            ResultSet r = stmt.executeQuery("SELECT LAST_INSERT_ID() AS cId");
            r.next();
            e1.contactId= r.getInt("cId");
            stmt.close();
            entityDbPool.freeConnection(conn);
        }
        catch(Exception ept)
        {
            daemon.eventLog.sendMessage(ept);
        }
        return(e1);
    }

    /****************************************************
     * This function updates the record in the database
     * who's primary key matches the 
     * contactId value of the passed-in 
     * vo_contact object.
     *
     * @param e a vo_contact object
     ****************************************************
     */
    public void update(vo_contact e)
    {
        StringBuffer qsb=new StringBuffer();
        qsb.append("UPDATE contact ").append("SET ");
        qsb.append(FIELD_CONTACTNAME+"='").append(SqlSafe.sqlSafe( e.contactName)).append("',");
        qsb.append(FIELD_CONTACTEMAIL+"='").append(SqlSafe.sqlSafe( e.contactEmail)).append("',");
        qsb.append(FIELD_CONTACTPHONE+"='").append(SqlSafe.sqlSafe( e.contactPhone)).append("',");
        qsb.append(FIELD_CONTACTCOMPANY+"='").append(SqlSafe.sqlSafe( e.contactCompany)).append("',");
        qsb.append(FIELD_CONTACTSUBJECT+"='").append(SqlSafe.sqlSafe( e.contactSubject)).append("',");
        qsb.append(FIELD_CONTACTMESSAGE+"='").append(SqlSafe.sqlSafe( e.contactMessage)).append("',");
        qsb.append(FIELD_CONTACTSOURCE+"='").append(SqlSafe.sqlSafe( e.contactSource)).append("',");
        qsb.append(FIELD_CONTACTCREATED+"='").append(SqlSafe.sqlSafe( e.contactCreated)).append("',");
        qsb.append(FIELD_CONTACTMODIFIED+"='").append(SqlSafe.sqlSafe( e.contactModified)).append("',");
        qsb.append(FIELD_CONTACTSTATUS+"='").append(SqlSafe.sqlSafe( e.contactStatus)).append("'");
        qsb.append(" WHERE ");
                qsb.append("contactId="+e.contactId);

        executeUpdate(qsb.toString());
    }

    /****************************************************
     * This function updates the record in the database
     * who's primary key matches the 
     * contactId value of the passed-in 
     * vo_contact object.
     *
     * @param e a vo_contact object
     ****************************************************
     */
    public void updateQueue(vo_contact e)
    {
        StringBuffer qsb=new StringBuffer();
        qsb.append("UPDATE contact ").append("SET ");
        qsb.append(FIELD_CONTACTNAME+"='").append(SqlSafe.sqlSafe( e.contactName)).append("',");
        qsb.append(FIELD_CONTACTEMAIL+"='").append(SqlSafe.sqlSafe( e.contactEmail)).append("',");
        qsb.append(FIELD_CONTACTPHONE+"='").append(SqlSafe.sqlSafe( e.contactPhone)).append("',");
        qsb.append(FIELD_CONTACTCOMPANY+"='").append(SqlSafe.sqlSafe( e.contactCompany)).append("',");
        qsb.append(FIELD_CONTACTSUBJECT+"='").append(SqlSafe.sqlSafe( e.contactSubject)).append("',");
        qsb.append(FIELD_CONTACTMESSAGE+"='").append(SqlSafe.sqlSafe( e.contactMessage)).append("',");
        qsb.append(FIELD_CONTACTSOURCE+"='").append(SqlSafe.sqlSafe( e.contactSource)).append("',");
        qsb.append(FIELD_CONTACTCREATED+"='").append(SqlSafe.sqlSafe( e.contactCreated)).append("',");
        qsb.append(FIELD_CONTACTMODIFIED+"='").append(SqlSafe.sqlSafe( e.contactModified)).append("',");
        qsb.append(FIELD_CONTACTSTATUS+"='").append(SqlSafe.sqlSafe( e.contactStatus)).append("'");
        qsb.append(" WHERE ");
                qsb.append("contactId="+e.contactId);

        entityQueue.put(qsb.toString());
    }

    /****************************************************
     * delete(id): This method deletes the object in the
     * who's primary ket matches the value passed in
     * 
     * @param id a Int representing the primary key
     ****************************************************
     */
    public void delete(int id)
    {
        String query;
        query="DELETE FROM contact WHERE contactId="+id;
        executeUpdate(query);
    }

    /****************************************************
     * This is the default load method that is called by
     * the container at startup
     ****************************************************
     */
    public void load()
    {
         //This is empty for now

    }

    /****************************************************
     * This function loads an individual record into the
     * cache
     *
     * @param id The primary key to use for record lookup
     ****************************************************
     */
    public void load(int id)
    {
       String qs=
           "SELECT * FROM contact WHERE contactId="+id;

       executeQuery(qs,"setEntityC");
    }

    /****************************************************
     * This function loads an individual record into the
     * cache
     *
     * @param id The  key to use for record lookup
     ****************************************************
     */
    public void load(String id)
    {
         //Override this method to implement cache scheme

    }

    /****************************************************
     * This function returns the number of records
     * in the table represented by this entity. 
     * 
     * @return The number of records in the table
     ****************************************************
     */
    public int getCount()
    {
        int count=0;
        String qs=
            "SELECT COUNT(contactId) AS Count FROM contact ";
        ResultSet r=executeQuery(qs);
        try
        {
            r.next();
            count=r.getInt("Count");
            closeResultSet(r);
        }
        catch(Exception e)
         {
            daemon.event_log.sendMessage("Can't retrieve ResultSet because: "+e.getMessage());
        }
        return(count);
    }

    /****************************************************
     * This function is called by the daemon when this 
     * Entity Object is initialized
     * Sub-class should invoke super.init() then:
     * entityCache.start(t)
     * useLocalEntityQueue() (if you want a local queue)
     ****************************************************
     */
    public void init()
    {
        entityQueue.start();          // Start Global Entity Queue
        //entityCache.start(30);      // Start Entity Cache
        //useLocalEntityQueue();      // Set and Start Local Entity Queue
    }

}

