/* eo_playlist_gen.java
 *
 * THE FOLLOWING CODE IS AUTO GENERATED BY GENDB SCRIPT 
 * !!!!!!!!!!!!  DO NOT MODIFY THIS FILE !!!!!!!!!!!
 */
package com.qkernel.examples.model;

import java.lang.*;
import java.sql.*;
import java.util.*;

import com.qkernel.*;


@SuppressWarnings({"unchecked", "fallthrough", "serial" })
/************************************************************
 * An entity object for the db table playlist
 * 
 * 
 * @author Initially created by EntityObjectBuilder
 * @version $Revision$ 
 ************************************************************
 */
public abstract class eo_playlist_gen extends EntityObject
{

    public final static String FIELD_PLAYLISTID = "playlistId";
    public final static String FIELD_USERID = "userId";
    public final static String FIELD_MEDIAID = "mediaId";
    public final static String FIELD_PLAYLISTUSERID = "playlistUserId";
    public final static String FIELD_PLAYLISTORDER = "playlistOrder";
    public final static String FIELD_PLAYLISTCREATED = "playlistCreated";
    public final static String FIELD_PLAYLISTMODIFIED = "playlistModified";
    public final static String FIELD_PLAYLISTSTATUS = "playlistStatus";

    /****************************************************
     * find(): This method implements find by primary key
     * key for the table playlist.
     * If it doesn't find the object in the existing 
     * cache, it loads the necessary data from the db.
     *
     * @param id The primary key value for the record we
     *  searching for
     * @return a vo_playlist object, representing
     *  the record
     ****************************************************
     */
    public vo_playlist find(int id)
    {
        vo_playlist e = findInCache(id);

        if(e == null)
        {
            // Try to load cache first
            load(id);
            return(findInCache(id));
        }
        else 
        {
            // return cache value
            return(e);
        }
    }

    /*****************************************************
     * This method checks the cache for the requested item
     *
     * @param id the primary key of the record we're 
     *  looking for
     *
     * @return a vo_playlist that represents the 
     *  record or null, if it doesn't exist
     *
     *****************************************************
     */
    public vo_playlist findInCache(int id)
    {
        vo_playlist e = null;
        e = (vo_playlist)entityCache.get(new Integer(id));
        return(e);
    }

    /****************************************************
     * find(): This method implements find by primary key
     * key for the table playlist.
     * If it doesn't find the object in the existing 
     * cache, it loads the necessary data from the db.
     *
     * @param id The primary key value for the record we
     *  searching for
     * @return a vo_playlist object, representing
     *  the record
     ****************************************************
     */
    public vo_playlist find(String id)
    {
        vo_playlist e = findInCache(id);

        if(e == null)
        {
            // Try to load cache first
            load(id);
            return(findInCache(id));
        }
        else 
        {
            // return cache value
            return(e);
        }
    }

    /*****************************************************
     * This method checks the cache for the requested item
     *
     * @param id the primary key of the record we're 
     *  looking for
     *
     * @return a vo_playlist that represents the 
     *  record or null, if it doesn't exist
     *
     *****************************************************
     */
    public vo_playlist findInCache(String id)
    {
        vo_playlist e = null;
        e = (vo_playlist)entityCache.get(id);
        return(e);
    }

    /*****************************************************
     * This function returns an ArrayList  of all Value 
     * Objects in this Entity Object
     * @return an ArrayList of all the vo_playlist 
     *  objects
     *
     *****************************************************
     */
    public ArrayList find()
    {
        String query = "SELECT * FROM playlist ";
        ArrayList al = new ArrayList();
        executeQuery(query, "setEntity", al);
        return al;
    }

    /*****************************************************
     * This function returns an ArrayList  of all Value 
     * Objects based on query
     * @return an ArrayList of all the vo_playlist 
     *  objects
     *
     *****************************************************
     */
    public ArrayList executeQueryList(String query)
    {
        ArrayList al = new ArrayList();
        executeQuery(query, "setEntity", al);
        return al;
    }

    /*****************************************************
     * This function returns an ArrayList  of all Value 
     * Objects based on query
     * @return an ArrayList of all the vo_playlist 
     *  objects
     *
     *****************************************************
     */
    public ArrayList executeQueryList(String query, String mapper)
    {
        ArrayList al = new ArrayList();
        executeQuery(query, mapper, al);
        return al;
    }

    /****************************************************
     * executeQueryObject(): This method implements 
     * executeQuery for the table playlist.
     * -- and returns vo_playlist  
     * @param query string
     * @return a vo_playlist object
     ****************************************************
     */
    public vo_playlist executeQueryObject(String query)
    {
        Vector vec = new Vector();
        executeQuery(query, "setEntityV", vec );
        Enumeration enm = vec.elements();
        if(enm.hasMoreElements())
            return((vo_playlist)enm.nextElement());
        else
            return(null);
    }

    /****************************************************
     * executeQueryObject(): This method implements 
     * executeQuery for the table playlist.
     * -- and returns vo_playlist  
     * @param query string
     * @return a vo_playlist object
     ****************************************************
     */
    public vo_playlist executeQueryObject(String query, String mapper)
    {
        Vector vec = new Vector();
        executeQuery(query, mapper, vec );
        Enumeration enm = vec.elements();
        if(enm.hasMoreElements())
            return((vo_playlist)enm.nextElement());
        else
            return(null);
    }

    /*****************************************************
     * This function takes the current row in a ResultSet,
     * creates a vo_playlist object with the data, 
     * @param rs A result set of a query on the playlist table
     *****************************************************
     */
     public void setEntity(ResultSet rs, ArrayList al) throws SQLException
     {
         vo_playlist e = entityRow(rs);
         al.add(e);
     }

    /*****************************************************
     * This function takes the current row in a ResultSet,
     * creates a vo_playlist object with the data, 
     * @param rs A result set of a query on the playlist table
     *****************************************************
     */
     public void setEntityV(ResultSet rs, Vector vec) throws SQLException
     {
         vo_playlist e = entityRow(rs);
         vec.addElement(e);
     }

    /*****************************************************
     * This function is similar to the setEntity() method.
     * It takes the current row in a ResultSet,
     * creates a vo_playlist object with the data, 
     * but instead of placing it in the cache,
     * it places it in the ArrayList that is passed in.
    *
     * @param al An ArrayList to place the resulting vo_playlist object into.
     * @param rs A result set of a query on the playlist table
     * @see #setEntity()
     ****************************************************
     */
    public void setEntityC(ResultSet rs) throws SQLException
    {
        vo_playlist e = entityRow(rs);
        entityCache.put(new Integer(e.playlistId), e);
     }

    /****************************************************
     * This function maps an SQL row to a Value Object
     *
     * @param rs a ResultSet that contains the record to be mapped
     * @return a vo_playlist value object
     ****************************************************
     */
    public vo_playlist entityRow(ResultSet rs) throws SQLException
    {
        vo_playlist e = new vo_playlist();
        e.playlistId= rs.getInt(FIELD_PLAYLISTID);
        e.userId= rs.getInt(FIELD_USERID);
        e.mediaId= rs.getInt(FIELD_MEDIAID);
        e.playlistUserId= rs.getInt(FIELD_PLAYLISTUSERID);
        e.playlistOrder= rs.getInt(FIELD_PLAYLISTORDER);
        e.playlistCreated= rs.getString(FIELD_PLAYLISTCREATED);
        e.playlistModified= rs.getString(FIELD_PLAYLISTMODIFIED);
        e.playlistStatus= rs.getString(FIELD_PLAYLISTSTATUS);
        return(e);
    }

    /****************************************************
     * This method inserts a new record into the table,
     * but DOES NOT return the new ID or a reference object
     * @param vo_playlist a value object to be written
     *  to the DB
     * @see #insert2()
     ****************************************************
     */
    public void insert(vo_playlist e){
        StringBuffer qsb=new StringBuffer();
        qsb.append("INSERT INTO playlist(");
        qsb.append(FIELD_USERID+",");
        qsb.append(FIELD_MEDIAID+",");
        qsb.append(FIELD_PLAYLISTUSERID+",");
        qsb.append(FIELD_PLAYLISTORDER+",");
        qsb.append(FIELD_PLAYLISTCREATED+",");
        qsb.append(FIELD_PLAYLISTMODIFIED+",");
        qsb.append(FIELD_PLAYLISTSTATUS+")");
        qsb.append("VALUES(");
        qsb.append("").append(e.userId).append(",");
        qsb.append("").append(e.mediaId).append(",");
        qsb.append("").append(e.playlistUserId).append(",");
        qsb.append("").append(e.playlistOrder).append(",");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistCreated)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistModified)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistStatus)).append("')");


        executeUpdate(qsb.toString());
    }

    /****************************************************
     * This method inserts a new record into the table,
     * using the local entityQueue
     * @param vo_playlist a value object to be written
     *  to the DB
     * @see #insert2()
     ****************************************************
     */
    public void insertQueue(vo_playlist e){
        StringBuffer qsb=new StringBuffer();
        qsb.append("INSERT INTO playlist(");
        qsb.append(FIELD_USERID+",");
        qsb.append(FIELD_MEDIAID+",");
        qsb.append(FIELD_PLAYLISTUSERID+",");
        qsb.append(FIELD_PLAYLISTORDER+",");
        qsb.append(FIELD_PLAYLISTCREATED+",");
        qsb.append(FIELD_PLAYLISTMODIFIED+",");
        qsb.append(FIELD_PLAYLISTSTATUS+")");
        qsb.append("VALUES(");
        qsb.append("").append(e.userId).append(",");
        qsb.append("").append(e.mediaId).append(",");
        qsb.append("").append(e.playlistUserId).append(",");
        qsb.append("").append(e.playlistOrder).append(",");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistCreated)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistModified)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistStatus)).append("')");


        entityQueue.put(qsb.toString());
    }

    /****************************************************
     * This method inserts a new record into the table,
     * AND returns a reference object with the new
     * auto-generated PK;
     *
     * @param vo_playlist a value object to be written to the DB
      * @return a vo_playlist object that represents
     *  the original object, with the addition of the primary key
     * @see #insert()
     ****************************************************
     */
    public vo_playlist insert2(vo_playlist e)
    {
        vo_playlist e1=(vo_playlist) e.clone();

        StringBuffer qsb=new StringBuffer();
        qsb.append("INSERT INTO playlist(");
        qsb.append(FIELD_USERID+",");
        qsb.append(FIELD_MEDIAID+",");
        qsb.append(FIELD_PLAYLISTUSERID+",");
        qsb.append(FIELD_PLAYLISTORDER+",");
        qsb.append(FIELD_PLAYLISTCREATED+",");
        qsb.append(FIELD_PLAYLISTMODIFIED+",");
        qsb.append(FIELD_PLAYLISTSTATUS+")");
        qsb.append("VALUES(");
        qsb.append("").append(e.userId).append(",");
        qsb.append("").append(e.mediaId).append(",");
        qsb.append("").append(e.playlistUserId).append(",");
        qsb.append("").append(e.playlistOrder).append(",");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistCreated)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistModified)).append("',");
        qsb.append("'").append(SqlSafe.sqlSafe( e.playlistStatus)).append("')");


        try
        {
            Connection conn    = entityDbPool.getConnection();
            Statement stmt     = conn.createStatement();
            stmt.executeUpdate(qsb.toString());
            //------------------------------------------------------------------
            // Retrieve new AUTO_INCREMENT playlistId 
            //------------------------------------------------------------------
            ResultSet r = stmt.executeQuery("SELECT LAST_INSERT_ID() AS cId");
            r.next();
            e1.playlistId= r.getInt("cId");
            stmt.close();
            entityDbPool.freeConnection(conn);
        }
        catch(Exception ept)
        {
            daemon.eventLog.sendMessage(ept);
        }
        return(e1);
    }

    /****************************************************
     * This function updates the record in the database
     * who's primary key matches the 
     * playlistId value of the passed-in 
     * vo_playlist object.
     *
     * @param e a vo_playlist object
     ****************************************************
     */
    public void update(vo_playlist e)
    {
        StringBuffer qsb=new StringBuffer();
        qsb.append("UPDATE playlist ").append("SET ");
        qsb.append(FIELD_USERID+"=").append(e.userId).append(",");
        qsb.append(FIELD_MEDIAID+"=").append(e.mediaId).append(",");
        qsb.append(FIELD_PLAYLISTUSERID+"=").append(e.playlistUserId).append(",");
        qsb.append(FIELD_PLAYLISTORDER+"=").append(e.playlistOrder).append(",");
        qsb.append(FIELD_PLAYLISTCREATED+"='").append(SqlSafe.sqlSafe( e.playlistCreated)).append("',");
        qsb.append(FIELD_PLAYLISTMODIFIED+"='").append(SqlSafe.sqlSafe( e.playlistModified)).append("',");
        qsb.append(FIELD_PLAYLISTSTATUS+"='").append(SqlSafe.sqlSafe( e.playlistStatus)).append("'");
        qsb.append(" WHERE ");
                qsb.append("playlistId="+e.playlistId);

        executeUpdate(qsb.toString());
    }

    /****************************************************
     * This function updates the record in the database
     * who's primary key matches the 
     * playlistId value of the passed-in 
     * vo_playlist object.
     *
     * @param e a vo_playlist object
     ****************************************************
     */
    public void updateQueue(vo_playlist e)
    {
        StringBuffer qsb=new StringBuffer();
        qsb.append("UPDATE playlist ").append("SET ");
        qsb.append(FIELD_USERID+"=").append(e.userId).append(",");
        qsb.append(FIELD_MEDIAID+"=").append(e.mediaId).append(",");
        qsb.append(FIELD_PLAYLISTUSERID+"=").append(e.playlistUserId).append(",");
        qsb.append(FIELD_PLAYLISTORDER+"=").append(e.playlistOrder).append(",");
        qsb.append(FIELD_PLAYLISTCREATED+"='").append(SqlSafe.sqlSafe( e.playlistCreated)).append("',");
        qsb.append(FIELD_PLAYLISTMODIFIED+"='").append(SqlSafe.sqlSafe( e.playlistModified)).append("',");
        qsb.append(FIELD_PLAYLISTSTATUS+"='").append(SqlSafe.sqlSafe( e.playlistStatus)).append("'");
        qsb.append(" WHERE ");
                qsb.append("playlistId="+e.playlistId);

        entityQueue.put(qsb.toString());
    }

    /****************************************************
     * delete(id): This method deletes the object in the
     * who's primary ket matches the value passed in
     * 
     * @param id a Int representing the primary key
     ****************************************************
     */
    public void delete(int id)
    {
        String query;
        query="DELETE FROM playlist WHERE playlistId="+id;
        executeUpdate(query);
    }

    /****************************************************
     * This is the default load method that is called by
     * the container at startup
     ****************************************************
     */
    public void load()
    {
         //This is empty for now

    }

    /****************************************************
     * This function loads an individual record into the
     * cache
     *
     * @param id The primary key to use for record lookup
     ****************************************************
     */
    public void load(int id)
    {
       String qs=
           "SELECT * FROM playlist WHERE playlistId="+id;

       executeQuery(qs,"setEntityC");
    }

    /****************************************************
     * This function loads an individual record into the
     * cache
     *
     * @param id The  key to use for record lookup
     ****************************************************
     */
    public void load(String id)
    {
         //Override this method to implement cache scheme

    }

    /****************************************************
     * This function returns the number of records
     * in the table represented by this entity. 
     * 
     * @return The number of records in the table
     ****************************************************
     */
    public int getCount()
    {
        int count=0;
        String qs=
            "SELECT COUNT(playlistId) AS Count FROM playlist ";
        ResultSet r=executeQuery(qs);
        try
        {
            r.next();
            count=r.getInt("Count");
            closeResultSet(r);
        }
        catch(Exception e)
         {
            daemon.event_log.sendMessage("Can't retrieve ResultSet because: "+e.getMessage());
        }
        return(count);
    }

    /****************************************************
     * This function is called by the daemon when this 
     * Entity Object is initialized
     * Sub-class should invoke super.init() then:
     * entityCache.start(t)
     * useLocalEntityQueue() (if you want a local queue)
     ****************************************************
     */
    public void init()
    {
        entityQueue.start();          // Start Global Entity Queue
        //entityCache.start(30);      // Start Entity Cache
        //useLocalEntityQueue();      // Set and Start Local Entity Queue
    }

}

