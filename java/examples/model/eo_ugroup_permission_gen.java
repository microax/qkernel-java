/* eo_ugroup_permission_gen.java
 *
 * THE FOLLOWING CODE IS AUTO GENERATED BY GENDB SCRIPT 
 * !!!!!!!!!!!!  DO NOT MODIFY THIS FILE !!!!!!!!!!!
 */
package com.qkernel.examples.model;

import java.lang.*;
import java.sql.*;
import java.util.*;

import com.qkernel.*;


@SuppressWarnings({"unchecked", "fallthrough", "serial" })
/************************************************************
 * An entity object for the db table ugroup_permission
 * 
 * 
 * @author Initially created by EntityObjectBuilder
 * @version $Revision$ 
 ************************************************************
 */
public abstract class eo_ugroup_permission_gen extends EntityObject
{

    public final static String FIELD_UGROUPID = "ugroupId";
    public final static String FIELD_PERMISSIONID = "permissionId";

    /*****************************************************
     * This function takes the current row in a ResultSet,
     * creates a vo_ugroup_permission object with the data, 
     * @param rs A result set of a query on the ugroup_permission table
     *****************************************************
     */
     public void setEntity(ResultSet rs, ArrayList al) throws SQLException
     {
         vo_ugroup_permission e = entityRow(rs);
         al.add(e);
     }

    /*****************************************************
     * This function takes the current row in a ResultSet,
     * creates a vo_ugroup_permission object with the data, 
     * @param rs A result set of a query on the ugroup_permission table
     *****************************************************
     */
     public void setEntityV(ResultSet rs, Vector vec) throws SQLException
     {
         vo_ugroup_permission e = entityRow(rs);
         vec.addElement(e);
     }

    /****************************************************
     * This function maps an SQL row to a Value Object
     *
     * @param rs a ResultSet that contains the record to be mapped
     * @return a vo_ugroup_permission value object
     ****************************************************
     */
    public vo_ugroup_permission entityRow(ResultSet rs) throws SQLException
    {
        vo_ugroup_permission e = new vo_ugroup_permission();
        e.ugroupId= rs.getInt(FIELD_UGROUPID);
        e.permissionId= rs.getInt(FIELD_PERMISSIONID);
        return(e);
    }

    /****************************************************
     * This method inserts a new record into the table,
     * but DOES NOT return the new ID or a reference object
     * @param vo_ugroup_permission a value object to be written
     *  to the DB
     * @see #insert2()
     ****************************************************
     */
    public void insert(vo_ugroup_permission e){
        StringBuffer qsb=new StringBuffer();
        qsb.append("INSERT INTO ugroup_permission(");
        qsb.append(FIELD_UGROUPID+",");
        qsb.append(FIELD_PERMISSIONID+")");
        qsb.append("VALUES(");
        qsb.append("").append(e.ugroupId).append(",");
        qsb.append("").append(e.permissionId).append(")");


        executeUpdate(qsb.toString());
    }

    /****************************************************
     * This method inserts a new record into the table,
     * using the local entityQueue
     * @param vo_ugroup_permission a value object to be written
     *  to the DB
     * @see #insert2()
     ****************************************************
     */
    public void insertQueue(vo_ugroup_permission e){
        StringBuffer qsb=new StringBuffer();
        qsb.append("INSERT INTO ugroup_permission(");
        qsb.append(FIELD_UGROUPID+",");
        qsb.append(FIELD_PERMISSIONID+")");
        qsb.append("VALUES(");
        qsb.append("").append(e.ugroupId).append(",");
        qsb.append("").append(e.permissionId).append(")");


        entityQueue.put(qsb.toString());
    }

    /****************************************************
     * This function is called by the daemon when this 
     * Entity Object is initialized
     * Sub-class should invoke super.init() then:
     * entityCache.start(t)
     * useLocalEntityQueue() (if you want a local queue)
     ****************************************************
     */
    public void init()
    {
        entityQueue.start();          // Start Global Entity Queue
        //entityCache.start(30);      // Start Entity Cache
        //useLocalEntityQueue();      // Set and Start Local Entity Queue
    }

}

